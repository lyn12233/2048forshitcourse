#import "utils.typ":*

//set default text font and style
#set text(font: font_zh.SongTi, size: font_size_zh.XiaoSi)
#set par(leading: 12pt, first-line-indent: 0em, justify: true)

//set equation props
#set math.equation(numbering: "(1)", supplement: "")
#show figure.caption: set text(font:font_zh.SongTi, size: font_size_zh.WuHao)
#show figure.where(kind:image): set figure(supplement: "图") 
#show figure.where(kind:table): set figure(supplement: "表") 
#show figure.where(kind:table): set figure.caption(position:top)
#set pagebreak(weak: true)

//page style
#set page(
  footer: [
    #set align(center)
    #counter(page).display("1")
  ]
)

//bib upercase style; disable autogenerated footnote
#set footnote(numbering: "[1]")
#set footnote.entry(separator: none)
#show footnote.entry: hide

//#set enum(indent: 0.74cm,)


#include "preface.typ"

#Section[设计目标]

#MYPAR() 本次程序设计计划在命令行实现实时交互的2048小游戏。设计目标如下。

#SubSection[2048小游戏规则]

#MYPAR() 2048是一款著名的益智小游戏。其操作对象通常为4*4的方格阵列, 方格为空或显示2, ..., 2048之一的数, 操作规则为:
+ *移动*: 玩家给出移动方向, 方格按移动方向依次尝试与该方向相邻方格合并, 如果方格与相邻方格未发生合并且代表的值相同则进行合并。每进行一次移动后, 尝试在空方格生成2个值为2或4的方格, 空方格为一个时将其值改变为2或4。
+ *结束判定*: 发生一次移动后, 如果方格阵未发生改变, 且各个方向的移动均不可能改变方格阵, 则判定为失败; 如果首次出现值为2048的方格, 则判定为成功。

#SubSection[程序功能]

#MYPAR() 在除了实现2048小游戏基本逻辑以外, 程序还实现以下功能:
+ *提示模式*: 在用户启动游戏后, 输入Ctrl+H进入提示模式(即作弊模式)。提示模式下以最大合并数量为目标进行一次自动移动操作。一次游戏中提示模式不可改回正常模式, 以"(CHEATED)"字样进行标识, 游戏结束后不计入得分。
+ *用户信息*: 游戏支持多用户记录, 以命令行启动参数的第1、2项作为用户名和密码, 尝试注册或登录。默认用户和密码均为空字符串。
+ *计时和得分*: 游戏实时显示一次游戏从开始经历的时间, 以从开始到胜利的用时作为得分, 以最短用时作为当前用户的记录。
+ *界面渲染*: 游戏利用ANSI转义序列实现命令行覆写和彩色输出, 打印文本进行类GUI渲染。同时游戏根据窗口大小实时调整, 使界面尽可能居中。
+ *其他*: 游戏界面显示简短的操作说明。用户按Ctrl+C退出, 按Ctrl+Q打开#text(fill: aqua)[#link("https://github.com/lyn12233")[网页说明]]。





#Section[程序实现]

#SubSection[程序结构]

#MYPAR() 程序实现前后端分离的结构, 有利于实现实时交互和向图形界面的扩展。程序结构如 @fig_struct 所示。

#figure(
  image("../img/the_structure.svg", height: 5cm),
  caption: [程序结构示意图]
)<fig_struct>

#MYPAR() 程序的主要组成部分为:

+ backend_worker: 实现了2048游戏的逻辑, 用时记录, 用户信息存储等, 设置并更新游戏状态。
+ on_press: 作为keyboard.Listener的调用函数, 处理键盘事件, 对方向键消息发送至backend_worker, 同时处理快捷键Ctrl+C和Ctrl+Q。
+ frontend_worker: 根据backend_worker的结果渲染命令行界面; 作为主循环决定是否运行, 同时根据命令行参数配置用户。
+ actions_queue, ack_queue: 内置库queue的实例, 负责在各部分间传递消息。

#SubSection[运行流程]

#MYPAR() 程序实现了3个游戏状态(state): 停止状态(pending)、运行状态(playing)和提示状态(cheated)。程序启动时为停止状态, 在停止状态下通过按方向键进入运行状态。运行状态下通过提示(Ctrl+H)进入提示状态。满足结束条件后回到停止状态。

#Section[程序说明]

#SubSection[依赖库]
#MYPAR()第三方依赖库为numpy, pynput, 运行 #box(fill: luma(235), outset: 3pt)[#raw("pip install -r requirements.txt")] 安装。

#SubSection[运行方法]
#MYPAR()可以通过如下指令运行此程序。

#align(center)[
#block(fill: luma(235), width: 16cm, outset: 3pt)[
#set align(left)
#raw("cd path/to/game/folder\npython . [<user_name>] [<password>]",lang:"bash", align: center)]]

#MYPAR() 也可以通过执行 #box(fill:luma(235), outset: 3pt,)[#raw("__main__.py")] 运行此程序。

#SubSection[常量说明]
#MYPAR()在config.py中定义了以下常量, 以便调试和演示:
+ N: 含N*N的方格。N通常为4。
+ LVWIN: 方格的值出现 $2^("LVWIN")$ 判定为胜利。降低LVWIN可方便调试。游戏时应为11。

#Section[程序演示]

#figure(
  image("../img/on_start.png", height: 10cm),
  caption: [启动界面, 方格样式的展示]
)
#figure(
  image("../img/finish_anonymous.png", height: 10cm),
  caption: [胜利结算画面(默认用户)]
)
#figure(
  image("../img/new_record.png", height: 10cm),
  caption: [胜利结算画面(名为user1的用户, 新纪录)]
)
#figure(
  image("../img/cheating.png", height: 10cm),
  caption: [提示模式]
)
#figure(
  image("../img/fail.png", height: 10cm),
  caption: [失败结算画面]
)
#figure(
  image("../img/finish_cheated.png", height: 10cm),
  caption: [提示模式下胜利]
)

#Section[评价与推广]

#SubSection[本程序的优点]
+ 100%完成了作业要求。
+ 实现了彩色渲染、计时器等额外功能。

#SubSection[本程序的缺点]
#v(6pt)
+ 提示模式不够智能。
+ 一定环境下程序退出时不能恢复原有颜色样式。

#SubSection[程序的推广]
#MYPAR() 可以利用wx、qt等图形界面库重写前端部分, 做出更为惊艳的实现。

#Section[参考资料]

[1] python+tkinter实现: #link("https://github.com/yangshun/2048-python")

[2] cpp命令行实现: #link("https://github.com/plibither8/2048.cpp")